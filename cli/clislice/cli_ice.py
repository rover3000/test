# **********************************************************************
#
# Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.4.2
#
# <auto-generated>
#
# Generated from file `cli.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy, __builtin__
import Ice_Identity_ice

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Start of module Cli
_M_Cli = Ice.openModule('Cli')
__name__ = 'Cli'

if not _M_Cli.__dict__.has_key('_t_CmdSeq'):
    _M_Cli._t_CmdSeq = IcePy.defineSequence('::Cli::CmdSeq', (), IcePy._t_string)

if not _M_Cli.__dict__.has_key('loginError'):
    _M_Cli.loginError = Ice.createTempClass()
    class loginError(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'Cli::loginError'

    _M_Cli._t_loginError = IcePy.defineException('::Cli::loginError', loginError, (), None, ())
    loginError._ice_type = _M_Cli._t_loginError

    _M_Cli.loginError = loginError
    del loginError

if not _M_Cli.__dict__.has_key('cmdError'):
    _M_Cli.cmdError = Ice.createTempClass()
    class cmdError(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'Cli::cmdError'

    _M_Cli._t_cmdError = IcePy.defineException('::Cli::cmdError', cmdError, (), None, ())
    cmdError._ice_type = _M_Cli._t_cmdError

    _M_Cli.cmdError = cmdError
    del cmdError

if not _M_Cli.__dict__.has_key('CliOutCallback'):
    _M_Cli.CliOutCallback = Ice.createTempClass()
    class CliOutCallback(Ice.Object):
        def __init__(self):
            if __builtin__.type(self) == _M_Cli.CliOutCallback:
                raise RuntimeError('Cli.CliOutCallback is an abstract class')

        def ice_ids(self, current=None):
            return ('::Cli::CliOutCallback', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Cli::CliOutCallback'

        def ice_staticId():
            return '::Cli::CliOutCallback'
        ice_staticId = staticmethod(ice_staticId)

        def outString_async(self, _cb, message, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_Cli._t_CliOutCallback)

        __repr__ = __str__

    _M_Cli.CliOutCallbackPrx = Ice.createTempClass()
    class CliOutCallbackPrx(Ice.ObjectPrx):

        def outString(self, message, _ctx=None):
            return _M_Cli.CliOutCallback._op_outString.invoke(self, ((message, ), _ctx))

        def begin_outString(self, message, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Cli.CliOutCallback._op_outString.begin(self, ((message, ), _response, _ex, _sent, _ctx))

        def end_outString(self, _r):
            return _M_Cli.CliOutCallback._op_outString.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Cli.CliOutCallbackPrx.ice_checkedCast(proxy, '::Cli::CliOutCallback', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Cli.CliOutCallbackPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_Cli._t_CliOutCallbackPrx = IcePy.defineProxy('::Cli::CliOutCallback', CliOutCallbackPrx)

    _M_Cli._t_CliOutCallback = IcePy.defineClass('::Cli::CliOutCallback', CliOutCallback, (), True, None, (), ())
    CliOutCallback._ice_type = _M_Cli._t_CliOutCallback

    CliOutCallback._op_outString = IcePy.Operation('outString', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, (), (((), IcePy._t_string),), (), None, ())

    _M_Cli.CliOutCallback = CliOutCallback
    del CliOutCallback

    _M_Cli.CliOutCallbackPrx = CliOutCallbackPrx
    del CliOutCallbackPrx

if not _M_Cli.__dict__.has_key('CliCmd'):
    _M_Cli.CliCmd = Ice.createTempClass()
    class CliCmd(Ice.Object):
        def __init__(self):
            if __builtin__.type(self) == _M_Cli.CliCmd:
                raise RuntimeError('Cli.CliCmd is an abstract class')

        def ice_ids(self, current=None):
            return ('::Cli::CliCmd', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Cli::CliCmd'

        def ice_staticId():
            return '::Cli::CliCmd'
        ice_staticId = staticmethod(ice_staticId)

        def cmdExec_async(self, _cb, cmdString, current=None):
            pass

        def logout_async(self, _cb, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_Cli._t_CliCmd)

        __repr__ = __str__

    _M_Cli.CliCmdPrx = Ice.createTempClass()
    class CliCmdPrx(Ice.ObjectPrx):

        def cmdExec(self, cmdString, _ctx=None):
            return _M_Cli.CliCmd._op_cmdExec.invoke(self, ((cmdString, ), _ctx))

        def begin_cmdExec(self, cmdString, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Cli.CliCmd._op_cmdExec.begin(self, ((cmdString, ), _response, _ex, _sent, _ctx))

        def end_cmdExec(self, _r):
            return _M_Cli.CliCmd._op_cmdExec.end(self, _r)

        def logout(self, _ctx=None):
            return _M_Cli.CliCmd._op_logout.invoke(self, ((), _ctx))

        def begin_logout(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Cli.CliCmd._op_logout.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_logout(self, _r):
            return _M_Cli.CliCmd._op_logout.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Cli.CliCmdPrx.ice_checkedCast(proxy, '::Cli::CliCmd', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Cli.CliCmdPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_Cli._t_CliCmdPrx = IcePy.defineProxy('::Cli::CliCmd', CliCmdPrx)

    _M_Cli._t_CliCmd = IcePy.defineClass('::Cli::CliCmd', CliCmd, (), True, None, (), ())
    CliCmd._ice_type = _M_Cli._t_CliCmd

    CliCmd._op_cmdExec = IcePy.Operation('cmdExec', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, (), (((), _M_Cli._t_CmdSeq),), (), None, (_M_Cli._t_cmdError,))
    CliCmd._op_logout = IcePy.Operation('logout', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, (), (), (), None, (_M_Cli._t_cmdError,))

    _M_Cli.CliCmd = CliCmd
    del CliCmd

    _M_Cli.CliCmdPrx = CliCmdPrx
    del CliCmdPrx

if not _M_Cli.__dict__.has_key('CliServer'):
    _M_Cli.CliServer = Ice.createTempClass()
    class CliServer(Ice.Object):
        def __init__(self):
            if __builtin__.type(self) == _M_Cli.CliServer:
                raise RuntimeError('Cli.CliServer is an abstract class')

        def ice_ids(self, current=None):
            return ('::Cli::CliServer', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Cli::CliServer'

        def ice_staticId():
            return '::Cli::CliServer'
        ice_staticId = staticmethod(ice_staticId)

        def login_async(self, _cb, ident, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_Cli._t_CliServer)

        __repr__ = __str__

    _M_Cli.CliServerPrx = Ice.createTempClass()
    class CliServerPrx(Ice.ObjectPrx):

        def login(self, ident, _ctx=None):
            return _M_Cli.CliServer._op_login.invoke(self, ((ident, ), _ctx))

        def begin_login(self, ident, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Cli.CliServer._op_login.begin(self, ((ident, ), _response, _ex, _sent, _ctx))

        def end_login(self, _r):
            return _M_Cli.CliServer._op_login.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Cli.CliServerPrx.ice_checkedCast(proxy, '::Cli::CliServer', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Cli.CliServerPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_Cli._t_CliServerPrx = IcePy.defineProxy('::Cli::CliServer', CliServerPrx)

    _M_Cli._t_CliServer = IcePy.defineClass('::Cli::CliServer', CliServer, (), True, None, (), ())
    CliServer._ice_type = _M_Cli._t_CliServer

    CliServer._op_login = IcePy.Operation('login', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, (), (((), _M_Ice._t_Identity),), (), _M_Ice._t_Identity, (_M_Cli._t_loginError,))

    _M_Cli.CliServer = CliServer
    del CliServer

    _M_Cli.CliServerPrx = CliServerPrx
    del CliServerPrx

if not _M_Cli.__dict__.has_key('CliProxySession'):
    _M_Cli.CliProxySession = Ice.createTempClass()
    class CliProxySession(Ice.Object):
        def __init__(self):
            if __builtin__.type(self) == _M_Cli.CliProxySession:
                raise RuntimeError('Cli.CliProxySession is an abstract class')

        def ice_ids(self, current=None):
            return ('::Cli::CliProxySession', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Cli::CliProxySession'

        def ice_staticId():
            return '::Cli::CliProxySession'
        ice_staticId = staticmethod(ice_staticId)

        def keepAlive_async(self, _cb, current=None):
            pass

        def logout_async(self, _cb, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_Cli._t_CliProxySession)

        __repr__ = __str__

    _M_Cli.CliProxySessionPrx = Ice.createTempClass()
    class CliProxySessionPrx(Ice.ObjectPrx):

        def keepAlive(self, _ctx=None):
            return _M_Cli.CliProxySession._op_keepAlive.invoke(self, ((), _ctx))

        def begin_keepAlive(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Cli.CliProxySession._op_keepAlive.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_keepAlive(self, _r):
            return _M_Cli.CliProxySession._op_keepAlive.end(self, _r)

        def logout(self, _ctx=None):
            return _M_Cli.CliProxySession._op_logout.invoke(self, ((), _ctx))

        def begin_logout(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Cli.CliProxySession._op_logout.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_logout(self, _r):
            return _M_Cli.CliProxySession._op_logout.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Cli.CliProxySessionPrx.ice_checkedCast(proxy, '::Cli::CliProxySession', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Cli.CliProxySessionPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_Cli._t_CliProxySessionPrx = IcePy.defineProxy('::Cli::CliProxySession', CliProxySessionPrx)

    _M_Cli._t_CliProxySession = IcePy.defineClass('::Cli::CliProxySession', CliProxySession, (), True, None, (), ())
    CliProxySession._ice_type = _M_Cli._t_CliProxySession

    CliProxySession._op_keepAlive = IcePy.Operation('keepAlive', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, (), (), (), None, (_M_Cli._t_cmdError,))
    CliProxySession._op_logout = IcePy.Operation('logout', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, (), (), (), None, (_M_Cli._t_cmdError,))

    _M_Cli.CliProxySession = CliProxySession
    del CliProxySession

    _M_Cli.CliProxySessionPrx = CliProxySessionPrx
    del CliProxySessionPrx

if not _M_Cli.__dict__.has_key('CliProxyServer'):
    _M_Cli.CliProxyServer = Ice.createTempClass()
    class CliProxyServer(Ice.Object):
        def __init__(self):
            if __builtin__.type(self) == _M_Cli.CliProxyServer:
                raise RuntimeError('Cli.CliProxyServer is an abstract class')

        def ice_ids(self, current=None):
            return ('::Cli::CliProxyServer', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Cli::CliProxyServer'

        def ice_staticId():
            return '::Cli::CliProxyServer'
        ice_staticId = staticmethod(ice_staticId)

        def login_async(self, _cb, name, ident, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_Cli._t_CliProxyServer)

        __repr__ = __str__

    _M_Cli.CliProxyServerPrx = Ice.createTempClass()
    class CliProxyServerPrx(Ice.ObjectPrx):

        def login(self, name, ident, _ctx=None):
            return _M_Cli.CliProxyServer._op_login.invoke(self, ((name, ident), _ctx))

        def begin_login(self, name, ident, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Cli.CliProxyServer._op_login.begin(self, ((name, ident), _response, _ex, _sent, _ctx))

        def end_login(self, _r):
            return _M_Cli.CliProxyServer._op_login.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Cli.CliProxyServerPrx.ice_checkedCast(proxy, '::Cli::CliProxyServer', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Cli.CliProxyServerPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_Cli._t_CliProxyServerPrx = IcePy.defineProxy('::Cli::CliProxyServer', CliProxyServerPrx)

    _M_Cli._t_CliProxyServer = IcePy.defineClass('::Cli::CliProxyServer', CliProxyServer, (), True, None, (), ())
    CliProxyServer._ice_type = _M_Cli._t_CliProxyServer

    CliProxyServer._op_login = IcePy.Operation('login', Ice.OperationMode.Normal, Ice.OperationMode.Normal, True, (), (((), IcePy._t_string), ((), _M_Ice._t_Identity)), (), None, (_M_Cli._t_loginError,))

    _M_Cli.CliProxyServer = CliProxyServer
    del CliProxyServer

    _M_Cli.CliProxyServerPrx = CliProxyServerPrx
    del CliProxyServerPrx

# End of module Cli
